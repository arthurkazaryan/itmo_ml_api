version: '3.7'

services:
  api-itmo:
    build:
      context: src
      dockerfile: Dockerfile
    image: api_itmo
    restart: always
    env_file:
      - .env
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./src:/src
      - ./celery_app:/src/celery_app
    working_dir: /src
    command: gunicorn -c configs/gunicorn.conf.py start:app
  worker-model-1:
    build:
        context: celery_app
        dockerfile: Dockerfile
    env_file:
      - .env
    image: model_itmo
    restart: always
    environment:
      - MODEL_NAME=model_1
    depends_on:
      - redis-api-itmo
    volumes:
      - ./celery_app:/celery_app
    command: celery -A celery_app.worker worker -Q model_1 -l info -n model_1
  worker-model-2:
    build:
      context: celery_app
      dockerfile: Dockerfile
    env_file:
      - .env
    image: model_itmo
    restart: always
    environment:
      - MODEL_NAME=model_2
    depends_on:
      - redis-api-itmo
    volumes:
      - ./celery_app:/celery_app
    command: celery -A celery_app.worker worker -Q model_2 -l info -n model_2
  redis-api-itmo:
    image: redis:alpine
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redis:/data
    command: --port ${REDIS_PORT} --save 60 1 --loglevel warning --appendonly no
  flower-api-itmo:
    build:
      context: src
      dockerfile: Dockerfile
    image: api_itmo
    restart: always
    env_file:
      - .env
    volumes:
      - ./celery_app/:/celery_app
    command: celery -A celery_app.worker flower --port=${FLOWER_PORT}
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
